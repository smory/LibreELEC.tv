--- a/kernel/nvidia/os-mlock.c	2016-05-23 19:41:41.487380938 +0100
+++ b/kernel/nvidia/os-mlock.c	2016-05-23 19:42:34.716761233 +0100
@@ -116,7 +116,7 @@
     }
 
     down_read(&mm->mmap_sem);
-    ret = get_user_pages(current, mm, (unsigned long)address,
+    ret = get_user_pages((unsigned long)address,
             page_count, write, force, user_pages, NULL);
     up_read(&mm->mmap_sem);
     pinned = ret;
@@ -129,7 +129,7 @@
     else if (pinned < page_count)
     {
         for (i = 0; i < pinned; i++)
-            page_cache_release(user_pages[i]);
+            put_page(user_pages[i]);
         os_free_mem(user_pages);
         return NV_ERR_INVALID_ADDRESS;
     }
@@ -156,7 +156,7 @@
     {
         if (write)
             set_page_dirty_lock(user_pages[i]);
-        page_cache_release(user_pages[i]);
+        put_page(user_pages[i]);
     }
 
     os_free_mem(user_pages);
--- a/kernel/nvidia-uvm/uvm_full_pagetbl_mgmt.c	2016-03-22 23:48:41.000000000 +0000
+++ b/kernel/nvidia-uvm/uvm_full_pagetbl_mgmt.c	2016-05-23 20:17:26.337911381 +0100
@@ -2907,7 +2907,7 @@
 
         // get userPA for this range
         down_read(&current->mm->mmap_sem);
-        returnVal = get_user_pages(current, current->mm, (unsigned long)(UVM_ALIGN_ADDR(userCopyBuffer, PAGE_SIZE_4K)),
+        returnVal = get_user_pages((unsigned long)(UVM_ALIGN_ADDR(userCopyBuffer, PAGE_SIZE_4K)),
             userPagesReq, 1, 0, tempUserPageArray, NULL);
         up_read(&current->mm->mmap_sem);
 
@@ -2937,7 +2937,7 @@
                     set_page_dirty_lock(tempUserPageArray[i]);
 
             UVM_PANIC_ON(tempUserPageArray[i] == 0);
-            page_cache_release(tempUserPageArray[i]);
+            put_page(tempUserPageArray[i]);
             tempUserPageArray[i] = 0;
         }
 
--- a/kernel/nvidia-uvm/uvm8_tools.c	2016-05-23 20:17:47.218443656 +0100
+++ b/kernel/nvidia-uvm/uvm8_tools.c	2016-05-23 20:18:02.002820423 +0100
@@ -157,7 +157,7 @@
     }
 
     down_read(&current->mm->mmap_sem);
-    ret = get_user_pages(current, current->mm, user_va, num_pages, 1, 0, *pages, NULL);
+    ret = get_user_pages(user_va, num_pages, 1, 0, *pages, NULL);
     up_read(&current->mm->mmap_sem);
     if (ret != num_pages) {
         status = NV_ERR_INVALID_ARGUMENT;
